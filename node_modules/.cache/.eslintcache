[{"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\index.js":"1","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\reportWebVitals.js":"2","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\App.js":"3","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\views\\GameScreen.js":"4","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\views\\HomeScreen.js":"5","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\DeckAdversaire.js":"6","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\GameGrid.js":"7","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\functions\\generateCard.js":"8","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\Deck.js":"9","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\Card.js":"10","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\EmptyCard.js":"11","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\firebase.js":"12","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\functions\\FinalGenCard.js":"13","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\serviceworker.js":"14"},{"size":610,"mtime":1665746175002,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1665046059285,"results":"17","hashOfConfig":"16"},{"size":766,"mtime":1665046059270,"results":"18","hashOfConfig":"16"},{"size":10069,"mtime":1665928991624,"results":"19","hashOfConfig":"16"},{"size":1110,"mtime":1665740371353,"results":"20","hashOfConfig":"16"},{"size":784,"mtime":1665046059277,"results":"21","hashOfConfig":"16"},{"size":7595,"mtime":1665911441833,"results":"22","hashOfConfig":"16"},{"size":1720,"mtime":1665046059280,"results":"23","hashOfConfig":"16"},{"size":1821,"mtime":1665912347569,"results":"24","hashOfConfig":"16"},{"size":1825,"mtime":1665930049645,"results":"25","hashOfConfig":"16"},{"size":410,"mtime":1665763930812,"results":"26","hashOfConfig":"16"},{"size":1015,"mtime":1665046059280,"results":"27","hashOfConfig":"16"},{"size":2143,"mtime":1665046059280,"results":"28","hashOfConfig":"16"},{"size":5868,"mtime":1665746160044,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"ah9lae",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"37"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"37"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\index.js",["82"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceworker';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.register();\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\App.js",[],[],"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\views\\GameScreen.js",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],[],"import React, { Component } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport styles from '../css/GameScreen.module.css';\r\nimport GameGrid from '../components/GameGrid'\r\nimport Deck from '../components/Deck'\r\nimport DeckAdversaire from '../components/DeckAdversaire'\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\n\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { db } from '../firebase.js';\r\nimport { getFirestore } from 'firebase/firestore/lite'\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\n// import Card from './Card';\r\n// const [win, setWin] = useState(false);\r\nconst taille_colonne = 6;\r\n\r\n\r\nasync function generateCards(player){\r\n\r\n    var cardsFromDb = [];\r\n    var card = {};\r\n    var listCards = [];\r\n    const querySnapshot = await getDocs(collection(db, \"cards\"));\r\n    querySnapshot.forEach((doc) => {\r\n        cardsFromDb.push(doc.data());\r\n    });\r\n    for (var i = 0; i < 4; i++){\r\n        // get all the data from the cards\r\n        var random = Math.floor(Math.random() * cardsFromDb.length);\r\n        // create a mix of the cards to create one cards\r\n        card = {\r\n            // index: uuidv4(),\r\n            name: cardsFromDb[random].name,\r\n            pv: cardsFromDb[random].pv,\r\n            attack: cardsFromDb[random].attack,\r\n            img: cardsFromDb[random].img,\r\n            who: player,\r\n        }\r\n        listCards.push(card);\r\n    }\r\n    return listCards;\r\n}\r\n\r\nasync function getAllCardsFromDb(){\r\n    var cardsFromDb = [];\r\n    const querySnapshot = await getDocs(collection(db, \"cards\"));\r\n    querySnapshot.forEach((doc) => {\r\n        cardsFromDb.push(doc.data());\r\n    });\r\n    return cardsFromDb;\r\n}\r\n\r\n\r\nfunction createEmptyPlateau(){\r\n    var plateau = [];\r\n    for(var i = 0; i < 3; i++){\r\n        plateau.push([[], [], [], [], [], []]);\r\n    }\r\n    return plateau;\r\n}\r\n\r\n\r\n// function removeCardFromDeck(index) {\r\n//     let deck = this.state.deck;\r\n//     deck.splice(index, 1);\r\n//     this.setState({deck: deck});\r\n//     this.state.deck.splice(index, 0, generateCard());\r\n// }\r\n\r\nconst sleep = ms => new Promise(\r\n    resolve => setTimeout(resolve, ms)\r\n  );\r\n\r\n\r\nexport default class GameScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heart:0,\r\n            heartEnemy: 0,\r\n            deck: [],\r\n            plateau: createEmptyPlateau(),\r\n            cards: [],\r\n            cardSelected: -1,\r\n            played:false,\r\n            emplacementTouche : [false, false, false],\r\n        };\r\n      };\r\n\r\n      componentDidMount() {\r\n        generateCards(\"me\").then( (listCards) => {\r\n                this.setState({deck: listCards});\r\n            }\r\n        );\r\n\r\n        getAllCardsFromDb().then( (listCards) => {\r\n            this.setState({cards: listCards});\r\n        }\r\n        );\r\n    }\r\n\r\n\r\n    handleCallback = (childData) => {\r\n        this.setState({heart: childData});\r\n        this.setState({cardSelected: childData});\r\n\r\n        console.log(childData);\r\n        if(childData !== \"-1\"){\r\n            var card = document.getElementById(\"#card\" + childData);\r\n            card.style.height='100px';\r\n            card.style.width='60px';\r\n        }  \r\n\r\n        // card.style.width='100px';\r\n        for(var i = 0; i < 4; i++)\r\n        {\r\n            if (i != childData){\r\n                var card = document.getElementById(\"#card\" + i);\r\n                card.style.height='80px';\r\n                card.style.width='50px';\r\n            }\r\n        }\r\n    };\r\n\r\n    handleCallbackPlayed = (childData) => {\r\n        this.setState({played: childData});\r\n        this.state.deck[this.state.cardSelected] = this.generateCard(\"me\");       \r\n        var button = document.getElementById(\"buttonFinDuTour\");\r\n        button.style.backgroundColor =\"yellow\";\r\n    }\r\n\r\n    generateCard(player){\r\n        var randomcard = this.state.cards[Math.floor(Math.random() * this.state.cards.length)];\r\n        var card = {\r\n            name: randomcard.name,\r\n            pv: randomcard.pv,\r\n            attack: randomcard.attack,\r\n            img: randomcard.img,\r\n            who:player,\r\n        }\r\n        return card;\r\n    }\r\n\r\n    computerPlaceCard(){\r\n        var card = this.generateCard(\"computer\");\r\n        console.log(card);\r\n        var index = Math.floor(Math.random() * 3);\r\n        var plateau = this.state.plateau;\r\n        plateau[index][0] = card;\r\n        this.setState({plateau: plateau});\r\n    }\r\n\r\n    AvanceColonne1(){\r\n        var plateau = this.state.plateau;\r\n        var nouveauplateau = createEmptyPlateau();\r\n        for(var i = 0; i < 3; i++){\r\n            for(var j = 0; j < plateau[0].length; j++){\r\n            \r\n                if(plateau[i][j].length != 0){\r\n                    if (plateau[i][j].who == \"computer\")\r\n                    {       \r\n                        nouveauplateau[i][j+1] = plateau[i][j];\r\n                        // console.log(\"detect card \" + this.detecteCardProche(nouveauplateau));\r\n                    } else {\r\n                        // console.log(\"position après \", i, j);\r\n                        // console.log(\"position avant\", i, j);\r\n                        nouveauplateau[i][j-1] = plateau[i][j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // console.log(this.detecteCardProche(nouveauplateau));\r\n        // var posCardProche = this.detecteCardProche(nouveauplateau);\r\n        // if(posCardProche != null){\r\n        //     nouveauplateau = this.fightCard(nouveauplateau, posCardProche[0], posCardProche[1]);\r\n        // }\r\n\r\n        // if (this.detecteCardProche(nouveauplateau)){\r\n        //     // console.log(\"PASSE ICI\" + i + j);\r\n        //     nouveauplateau = this.fightCard(nouveauplateau);\r\n        // }\r\n\r\n        nouveauplateau = this.detecteCardProche(nouveauplateau)\r\n\r\n        for(var i = 0; i < 3; i++){\r\n            if (nouveauplateau[i][0].who == \"me\"){\r\n                var emplacementTouche = [this.state.emplacementTouche[0], this.state.emplacementTouche[1], this.state.emplacementTouche[2]];\r\n                emplacementTouche[i] = true;\r\n                this.setState({emplacementTouche : emplacementTouche});\r\n            }\r\n        }\r\n        this.detectWinner();\r\n\r\n\r\n        // console.log(plateau);\r\n        // console.log(nouveauplateau);\r\n        this.setState({plateau: nouveauplateau});\r\n        var button = document.getElementById(\"buttonFinDuTour\");\r\n        button.style.backgroundColor =\"#465362\";\r\n    }\r\n\r\n    fightCard(plateau, i, j){\r\n        var card1 = plateau[i][j];\r\n        var card2 = plateau[i][j+1];\r\n        console.log(\"card1 \", card1);\r\n        console.log(\"card2 \", card2);\r\n\r\n        if (card1.attack == card2.pv && card2.attack == card1.pv){\r\n            // si les deux cartes sont à égalité\r\n            console.log(\"egalité\");\r\n            plateau[i][j] = [];\r\n            plateau[i][j+1] = [];\r\n            alert(\"Egalité\");\r\n\r\n        } else if (card2.attack > card1.pv){\r\n            console.log(\"card2 win\");\r\n            plateau[i][j] = [];\r\n            card2.pv = card2.pv - card1.attack;\r\n            alert(\"Tu as tué une des cartes du computer\");\r\n        } else if (card1.attack > card2.pv){\r\n            console.log(\"card1 win\");\r\n            plateau[i][j+1] = [];\r\n            card1.pv = card1.pv - card2.attack;\r\n            alert(\"L'ordi a tué une de tes cartes\");\r\n        } else {\r\n            // les deux cartes sont touchées mais pas mortes\r\n            console.log(\"les deux cartes sont touchées mais pas mortes\");\r\n            card1.pv = card1.pv - card2.attack;\r\n            card2.pv = card2.pv - card1.attack;\r\n        }\r\n        return plateau;\r\n    }\r\n\r\n    detecteCardProche(plateau){\r\n        // check if two card are near for the next turn, if yes, they fight and return plateau\r\n        for(var i = 0; i < 3; i++){\r\n            for(var j = 0; j < plateau[0].length; j++){\r\n                if(plateau[i][j].length != 0){\r\n                    if (plateau[i][j].who == \"computer\")\r\n                    {\r\n                        // console.log(\"detect card \" + plateau[i][j].who);\r\n                        // console.log(\"position après \", i, j);\r\n                        if (j+1 < taille_colonne){\r\n                            if (plateau[i][j+1].who == \"me\"){\r\n                                console.log(\"card proche\");\r\n                                plateau = this.fightCard(plateau, i, j);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return plateau;\r\n    }\r\n\r\n    detectWinner(){\r\n        console.log(\"emplacement touche : \" + this.state.emplacementTouche);\r\n        console.log(\"coeur enemie : \" + this.state.heartEnemy);\r\n        for (var i = 0; i < 3; i++){\r\n            if (this.state.emplacementTouche[this.heartEnemy] == true){\r\n                alert(\"Tu as gagné\");\r\n                return true;\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    async finDuTour(){\r\n        this.computerPlaceCard();\r\n        await sleep(1000);\r\n        this.AvanceColonne1();\r\n        this.setState({played: false});\r\n    }\r\n\r\n\r\nrender() {\r\n    return(\r\n\t\t<div className={styles.main}>        \r\n\t\t\t<DeckAdversaire/>\r\n\t\t\t<GameGrid value={this.state.plateau} heart={this.state.heart} cardSelected={this.state.deck[this.state.cardSelected]} fromChild={this.handleCallback} fromChildPlayed={this.handleCallbackPlayed} played={this.state.played} emplacementTouche={this.state.emplacementTouche}/>\r\n\r\n            <button className={styles.button} id=\"buttonFinDuTour\" onClick={() => {this.finDuTour()}} type=\"button\">Fin du tour</button>\r\n\r\n            <Deck value={this.state.deck} fromChildCard={this.handleCallback}/>\r\n            {/* <button onClick={() => {this.computerPlaceCard()}}>heart</button>\r\n            <button onClick={() => {this.AvanceColonne1()}}>avance</button>\r\n             */}\r\n            {/* <button onClick={() => {console.log(this.state.played)}}>card</button> */}\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n}\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\views\\HomeScreen.js",["103"],[],"import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport styles from '../css/HomeScreen.module.css';\r\nimport logo from '../assets/png/dungeon.png';\r\nexport default function HomeScreen (){\r\n\r\n        return(\r\n            <div className={styles.container}>\r\n                <div className={styles.menu}>\r\n                    <h1 className={styles.title_menu}>Dungeon Battle Card</h1>\r\n                    <img className={styles.img_menu} src={logo} alt=\"dungeon logo\"/>\r\n                    <div className={styles.link_menu}>\r\n                        <Link to=\"/game\">\r\n                            <button type=\"button\" className={styles.button}>\r\n                                Jouer\r\n                            </button>\r\n                        </Link>\r\n                        <Link to=\"/\">\r\n                            <button type=\"button\" className={styles.button}>\r\n                                Règles\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\DeckAdversaire.js",[],[],"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\GameGrid.js",["104","105","106","107","108","109"],[],"import React from 'react';\r\nimport Card from './Card';\r\nimport EmptyCard from './EmptyCard';\r\nimport styles from '../css/GameGrid.module.css';\r\n\r\nexport default class GameGridV2 extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            plateau: this.props.value,\r\n            cardSelected : this.props.cardSelected,\r\n            heart: this.props.heart,\r\n            heartEnemy: this.props.heartEnemy,\r\n            played:this.props.played,\r\n            emplacementTouche : this.props.emplacementTouche,\r\n        };\r\n}\r\n\r\n    sendCardSelected(nb){\r\n        this.props.fromChild(nb);\r\n    };\r\n\r\n    sendHasPlayed(value){\r\n        this.props.fromChildPlayed(value);\r\n    }\r\n\r\n    \r\n    ButtonEnemyHeart(nb){\r\n        if(this.props.emplacementTouche[nb-1] == true){\r\n            return <button id={\"enemy_\" + nb} className={styles.button_heart}>✖️</button>\r\n        }\r\n        else {\r\n            return <button id={\"enemy_\" + nb} className={styles.button_heart}>❔</button>\r\n        }\r\n    }\r\n\r\n\r\n    handleClickSelectBase (event){\r\n        console.log(\"le base du joueur se trouve en colonne : \" + event);\r\n        for(var i = 1; i <=3; i++){\r\n            if(i != event){\r\n                var btn = document.getElementById(\"btn_\" + i);\r\n                // console.log(btn);\r\n                btn.style.visibility = \"hidden\";\r\n            }\r\n        }\r\n\r\n        document.querySelector(\"#btn_\" + event).classList.add(styles.disabled);\r\n        document.querySelector(\"#base_title\").classList.add(styles.undisplay);\r\n        document.querySelector(\"#base_heart\").style.display = \"flex\";\r\n        this.state.heart = event;\r\n        this.setState({heart: event})\r\n\r\n        // Create enemy base\r\n        var pos = Math.floor(Math.random() * 3) + 1;\r\n        // console.log(\"le base de l'ennemi se trouve en colonne : \" + pos);\r\n        this.state.heartEnemy = pos;\r\n        this.setState({heartEnemy: pos})\r\n        // add color to the right button\r\n        document.querySelector(\"#enemy_\" + pos).classList.add(styles.enemyBase);\r\n        // console.log(\"le base de l'ennemi se trouve en colonne : \" + pos);\r\n    }\r\n\r\n    pushCardPlateau = (index) => {\r\n        console.log(this.props.cardSelected);\r\n        // console.log(\"yoyuyouy\")\r\n        if(!this.props.played) {\r\n            // console.log(\"passe ici\");\r\n        if(this.props.cardSelected !== null){\r\n            // console.log(\"passe ici aussi\");\r\n            if (this.state.heart != 0){\r\n                // let plateau = this.state.plateau;\r\n                let plateau = this.props.value;\r\n                let card = this.props.cardSelected;  \r\n                console.log(card);          \r\n                plateau[index][plateau[0].length-1] = card;\r\n                this.setState({plateau: plateau});\r\n                this.sendCardSelected(\"-1\");\r\n                this.sendHasPlayed(true);\t\r\n                this.state.played = true;\r\n                // console.log(this.state.plateau);\r\n                // this.setState({played: true});\r\n            }\r\n        }\r\n    }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                <div id=\"base_title\" className={styles.base_title}>Placez votre coeur ! </div>\r\n                <div id=\"base_heart\" className={styles.list_base_heartenemy}>\r\n                    {this.ButtonEnemyHeart(1)}\r\n                    {this.ButtonEnemyHeart(2)}\r\n                    {this.ButtonEnemyHeart(3)}\r\n                </div>\r\n\r\n                <div className={styles.grid}>\r\n                    <div className={styles.column}>\r\n                        {this.props.value[0].map((card, index) => {\r\n                            if(index === this.props.value[0].length -1){\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <div key={index} onClick={() => this.pushCardPlateau(0)}><EmptyCard/></div>\r\n                                }\r\n                            }else{\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <EmptyCard key={index}/>\r\n                                }\r\n                            }\r\n                        })}\r\n                    </div>\r\n                    <div className={styles.column}>\r\n                        {this.props.value[1].map((card, index) => {\r\n                            if(index === this.props.value[0].length -1){\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <div key={index} onClick={() => this.pushCardPlateau(1)}><EmptyCard/></div>\r\n                                }\r\n                            }else{\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <EmptyCard key={index}/>\r\n                                }\r\n                            }\r\n                        })}\r\n                    </div>\r\n                    <div className={styles.column}>\r\n                        {this.props.value[2].map((card, index) => {\r\n                            if(index === this.props.value[0].length -1){\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <div key={index} onClick={() => this.pushCardPlateau(2)}><EmptyCard/></div>\r\n                                }\r\n                            }else{\r\n                                if(card.name){\r\n                                    return <Card key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who}/>\r\n                                }else{\r\n                                    return <EmptyCard key={index}/>\r\n                                }\r\n                            }\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.list_base_heart}>\r\n                    <button id=\"btn_1\" className={styles.button_heart} onClick={() => {this.handleClickSelectBase(1)}}>💚</button>\r\n                    <button id=\"btn_2\" className={styles.button_heart} onClick={() => {this.handleClickSelectBase(2)}}>💙</button>\r\n                    <button id=\"btn_3\" className={styles.button_heart} onClick={() => {this.handleClickSelectBase(3)}}>❤️</button>\r\n                </div>\r\n\r\n                {/* {/* <button id=\"btn_3\" className={styles.button_heart} onClick={() => {console.log(this.props.value)}}>test</button> */}\r\n                {/* <button id=\"btn_3\" className={styles.button_heart} onClick={() => {console.log(this.props.emplacementTouche)}}>test</button> */}\r\n\r\n\r\n            </div>\r\n            \r\n            \r\n        )\r\n    }\r\n}","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\functions\\generateCard.js",["110","111","112","113","114","115"],[],"import { db } from '../firebase.js';\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport Card from '../components/Card.js';\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\n\r\n\r\n\r\nconst cyclop = '../assets/png/cyclop.png';\r\nconst troll = '../assets/png/troll.png';\r\nconst goblin = '../assets/png/goblin.png';\r\n\r\n\r\nfunction generateCard(who){\r\n    var possiblenames = [\"coco\", \"rico\", \"pépito\", \"patate\", \"cricri\"]\r\n    var img = [cyclop, troll, goblin]\r\n    var pv = Math.floor(Math.random() * 10) + 1;\r\n    var attack = Math.floor(Math.random() * 10) + 1;\r\n    var name = possiblenames[Math.floor(Math.random() * possiblenames.length)];\r\n    var card = {\r\n        name: name,\r\n        pv: pv,\r\n        attack: attack,\r\n        img: img[Math.floor(Math.random() * img.length)],\r\n        who:who,\r\n    }\r\n    return card;\r\n}\r\n\r\n// async function generateCard2(){\r\n//     var cards = [];\r\n//     var card = {};\r\n//     const querySnapshot = await getDocs(collection(db, \"cards\"));\r\n//     querySnapshot.forEach((doc) => {\r\n//         cards.push(doc.data());\r\n//         });\r\n    \r\n//     var random = Math.floor(Math.random() * cards.length);\r\n//     var card = {\r\n//         index: uuidv4(),\r\n//         name: cards[random].name,\r\n//         pv: cards[random].pv,\r\n//         attack: cards[random].attack,\r\n//         img: cards[random].img,\r\n//     }\r\n//     console.log(\"cards : \" + JSON.stringify(card));\r\n//     return card;\r\n// }\r\n\r\n// async function generateCard(){\r\n//     return generateCard2().then((card) => {\r\n//             // return <Card idkey={1} name={card.name} attack={card.attack} pv={card.pv} img={card.img}/>;\r\n//             return card;\r\n//         })\r\n// }\r\n\r\nexport default generateCard;","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\Deck.js",["116","117","118","119","120","121","122","123"],[],"import React from 'react';\r\nimport Card from './Card';\r\nimport FinalGenCard from '../functions/FinalGenCard';\r\nimport generateCard from '../functions/generateCard';\r\nimport styles from '../css/Deck.module.css';\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\nimport { db } from '../firebase.js';\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport {useEffect, useState} from 'react'\r\n\r\n\r\nexport default class Deck extends React.Component {\r\n    // transform the props to an array of cards\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            deck: this.props.value,\r\n            cardSelected : this.props.cardSelected,\r\n        }\r\n    }\r\n\r\n    sendCardSelected(nb){\r\n        this.props.fromChildCard(nb);\r\n      };\r\n\r\n\r\n\r\n    // remove card from the deck with his index\r\n    removeCardFromDeck(index) {\r\n        let deck = this.state.deck;\r\n        deck.splice(index, 1);\r\n        this.setState({deck: deck});\r\n        this.state.deck.splice(index, 0, generateCard(\"me\"));\r\n    }\r\n\r\n    cardSelected(index){\r\n        this.setState({cardSelected: this.state.deck[index]});\r\n        this.sendCardSelected(index);\r\n        var card = document.getElementById(\"#card\" + index);\r\n        // console.log(card);\r\n        if (card !== null) {\r\n            // card.style.height='100px';\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                {this.props.value.map((card, index) => {\r\n                    return <div key={index} className={styles.card} onClick={() => this.cardSelected(index)}><Card id={\"#card_ + {index}\"} key={index} name={card.name} pv={card.pv} attack={card.attack} img={card.img} who={card.who} index={index} deck={true} /></div>;\r\n                })}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\Card.js",["124"],[],"import React from 'react';\r\nimport styles from '../css/Card.module.css';\r\n\r\nexport default class Card extends React.Component {\r\n    handleClick(e) {\r\n        // console.log(e);        \r\n    }\r\n    Card(){\r\n    \r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.deck){\r\n            var card = document.getElementById(\"#card\" + this.props.index);\r\n            // console.log(card);\r\n            if (card !== null) {\r\n                card.style.height='80px';\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        if(this.props.who ==\"me\"){\r\n            return (\r\n                <div id={\"#card\" + this.props.index} className={styles.card} onClick={() => this.handleClick(this.props)}>\r\n                    <div className={styles.infos_card}>\r\n                        <p className={styles.pv_card}>{this.props.pv}</p>\r\n                        <p className={styles.force_card}>{this.props.attack}</p>\r\n                    </div>\r\n    \r\n                    <img src={require(`../assets/monsters/${this.props.img}`)} className={styles.img_card} alt=\"img\"/>\r\n                    <p className={styles.name_card}>{this.props.name}</p>\r\n\r\n                </div>\r\n                \r\n            );\r\n        }else{\r\n            return (\r\n                <div className={styles.card_enemy}>\r\n                    <div className={styles.infos_card}>\r\n                        <p className={styles.pv_card}>{this.props.pv}</p>\r\n                        <p className={styles.force_card}>{this.props.attack}</p>\r\n                    </div>\r\n\r\n                    <img src={require(`../assets/monsters/${this.props.img}`)} className={styles.img_card} alt=\"img\"/>\r\n                    <p className={styles.name_card}>{this.props.name}</p>\r\n                </div>\r\n                \r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\components\\EmptyCard.js",[],[],"C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\firebase.js",["125"],[],"// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBcYfps58z3GKUy95Q-pV3P3sJwrGXATJo\",\r\n  authDomain: \"cardgame-2ba61.firebaseapp.com\",\r\n  projectId: \"cardgame-2ba61\",\r\n  storageBucket: \"cardgame-2ba61.appspot.com\",\r\n  messagingSenderId: \"940628266349\",\r\n  appId: \"1:940628266349:web:af44d4aa158e28c2c99e64\",\r\n  measurementId: \"G-SW2ZN1RKCK\"\r\n};\r\n\r\n// Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\nconst db = getFirestore(firebaseApp);\r\nexport { db }\r\n\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\functions\\FinalGenCard.js",["126"],[],"import Card from '../components/Card.js';\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\nimport { db } from '../firebase.js';\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport React, {useEffect, useState} from 'react'\r\n\r\n\r\nasync function generateCard(){\r\n\r\n    var cardsFromDb = [];\r\n    var card = {};\r\n    var listCards = [];\r\n    const querySnapshot = await getDocs(collection(db, \"cards\"));\r\n    querySnapshot.forEach((doc) => {\r\n        cardsFromDb.push(doc.data());\r\n    });\r\n    for (var i = 0; i < 4; i++){\r\n        // get all the data from the cards\r\n        var random = Math.floor(Math.random() * cardsFromDb.length);\r\n        // create a mix of the cards to create one cards\r\n        card = {\r\n            index: uuidv4(),\r\n            name: cardsFromDb[random].name,\r\n            pv: cardsFromDb[random].pv,\r\n            attack: cardsFromDb[random].attack,\r\n            img: cardsFromDb[random].img,\r\n        }\r\n        listCards.push(card);\r\n    }\r\n    return listCards;\r\n}\r\n\r\n// useEffect(() => {\r\n//     // call the async function and create a card, set the card, and sett to the deck\r\n//     generateCardFromFireB().then((card) => {\r\n//         setCard(card);\r\n//         setDeck([...deck, card]);\r\n//     })\r\n// }, [])\r\n\r\n\r\n\r\nexport default function FinalGenCard() {  \r\n    const [deck, setDeck] = useState([]);\r\n\r\n    // async function generateDeckFromFireB(){\r\n    //     // create the deck of cards generated\r\n\r\n    //     var card = await generateCard();\r\n    //     deck.push(card);\r\n    //     console.log(ldeck);\r\n    //     return ldeck;\r\n    // }\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        generateCard().then( (listCards) => {\r\n            if (mounted) {\r\n                setDeck(listCards);\r\n            }\r\n        })\r\n        return () => mounted = false;\r\n    }, [])\r\n\r\n    return (\r\n        <div className='deck'>\r\n            <h1>My deck</h1>\r\n            {\r\n                deck.map((card) => {\r\n                    return <Card key={card.index} name={card.name} attack={card.attack} pv={card.pv} img={card.img}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\louii\\Documents\\GitHub\\CardGameReact\\src\\serviceworker.js",[],[],{"ruleId":"127","severity":1,"message":"128","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":23},{"ruleId":"127","severity":1,"message":"131","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":18},{"ruleId":"127","severity":1,"message":"132","line":2,"column":20,"nodeType":"129","messageId":"130","endLine":2,"endColumn":29},{"ruleId":"127","severity":1,"message":"133","line":7,"column":16,"nodeType":"129","messageId":"130","endLine":7,"endColumn":22},{"ruleId":"127","severity":1,"message":"134","line":7,"column":24,"nodeType":"129","messageId":"130","endLine":7,"endColumn":26},{"ruleId":"127","severity":1,"message":"135","line":9,"column":10,"nodeType":"129","messageId":"130","endLine":9,"endColumn":13},{"ruleId":"127","severity":1,"message":"136","line":9,"column":15,"nodeType":"129","messageId":"130","endLine":9,"endColumn":21},{"ruleId":"127","severity":1,"message":"137","line":11,"column":10,"nodeType":"129","messageId":"130","endLine":11,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":117,"column":19,"nodeType":"140","messageId":"141","endLine":117,"endColumn":21},{"ruleId":"142","severity":1,"message":"143","line":118,"column":21,"nodeType":"129","messageId":"144","endLine":118,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":127,"column":9,"nodeType":"147","messageId":"148","endLine":127,"endColumn":24},{"ruleId":"138","severity":1,"message":"139","line":159,"column":41,"nodeType":"140","messageId":"141","endLine":159,"endColumn":43},{"ruleId":"138","severity":1,"message":"149","line":160,"column":43,"nodeType":"140","messageId":"141","endLine":160,"endColumn":45},{"ruleId":"142","severity":1,"message":"150","line":186,"column":17,"nodeType":"129","messageId":"144","endLine":186,"endColumn":18},{"ruleId":"138","severity":1,"message":"149","line":187,"column":42,"nodeType":"140","messageId":"141","endLine":187,"endColumn":44},{"ruleId":"138","severity":1,"message":"149","line":209,"column":26,"nodeType":"140","messageId":"141","endLine":209,"endColumn":28},{"ruleId":"138","severity":1,"message":"149","line":209,"column":54,"nodeType":"140","messageId":"141","endLine":209,"endColumn":56},{"ruleId":"138","severity":1,"message":"139","line":239,"column":41,"nodeType":"140","messageId":"141","endLine":239,"endColumn":43},{"ruleId":"138","severity":1,"message":"149","line":240,"column":43,"nodeType":"140","messageId":"141","endLine":240,"endColumn":45},{"ruleId":"138","severity":1,"message":"149","line":245,"column":53,"nodeType":"140","messageId":"141","endLine":245,"endColumn":55},{"ruleId":"138","severity":1,"message":"149","line":261,"column":63,"nodeType":"140","messageId":"141","endLine":261,"endColumn":65},{"ruleId":"127","severity":1,"message":"151","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"149","line":31,"column":47,"nodeType":"140","messageId":"141","endLine":31,"endColumn":49},{"ruleId":"138","severity":1,"message":"139","line":43,"column":18,"nodeType":"140","messageId":"141","endLine":43,"endColumn":20},{"ruleId":"145","severity":1,"message":"146","line":53,"column":9,"nodeType":"147","messageId":"148","endLine":53,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":59,"column":9,"nodeType":"147","messageId":"148","endLine":59,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":73,"column":34,"nodeType":"140","messageId":"141","endLine":73,"endColumn":36},{"ruleId":"145","severity":1,"message":"146","line":82,"column":17,"nodeType":"147","messageId":"148","endLine":82,"endColumn":27},{"ruleId":"127","severity":1,"message":"152","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":12},{"ruleId":"127","severity":1,"message":"153","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":20},{"ruleId":"127","severity":1,"message":"154","line":2,"column":22,"nodeType":"129","messageId":"130","endLine":2,"endColumn":29},{"ruleId":"127","severity":1,"message":"155","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":12},{"ruleId":"127","severity":1,"message":"133","line":4,"column":16,"nodeType":"129","messageId":"130","endLine":4,"endColumn":22},{"ruleId":"127","severity":1,"message":"134","line":4,"column":24,"nodeType":"129","messageId":"130","endLine":4,"endColumn":26},{"ruleId":"127","severity":1,"message":"156","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":20},{"ruleId":"127","severity":1,"message":"133","line":6,"column":16,"nodeType":"129","messageId":"130","endLine":6,"endColumn":22},{"ruleId":"127","severity":1,"message":"134","line":6,"column":24,"nodeType":"129","messageId":"130","endLine":6,"endColumn":26},{"ruleId":"127","severity":1,"message":"152","line":7,"column":10,"nodeType":"129","messageId":"130","endLine":7,"endColumn":12},{"ruleId":"127","severity":1,"message":"153","line":8,"column":10,"nodeType":"129","messageId":"130","endLine":8,"endColumn":20},{"ruleId":"127","severity":1,"message":"154","line":8,"column":22,"nodeType":"129","messageId":"130","endLine":8,"endColumn":29},{"ruleId":"127","severity":1,"message":"132","line":9,"column":9,"nodeType":"129","messageId":"130","endLine":9,"endColumn":18},{"ruleId":"127","severity":1,"message":"131","line":9,"column":20,"nodeType":"129","messageId":"130","endLine":9,"endColumn":28},{"ruleId":"138","severity":1,"message":"149","line":24,"column":27,"nodeType":"140","messageId":"141","endLine":24,"endColumn":29},{"ruleId":"127","severity":1,"message":"157","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":22},{"ruleId":"127","severity":1,"message":"134","line":2,"column":24,"nodeType":"129","messageId":"130","endLine":2,"endColumn":26},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'uuidv4' is defined but never used.","'v4' is defined but never used.","'doc' is defined but never used.","'getDoc' is defined but never used.","'getFirestore' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'card' is already defined.","redeclared","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","Expected '===' and instead saw '=='.","'i' is already defined.","'Component' is defined but never used.","'db' is defined but never used.","'collection' is defined but never used.","'getDocs' is defined but never used.","'Card' is defined but never used.","'FinalGenCard' is defined but never used.","'getAnalytics' is defined but never used."]